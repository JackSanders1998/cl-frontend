/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedLocationsImport } from './routes/_authed/locations'
import { Route as AuthedLocationsIndexImport } from './routes/_authed/locations.index'
import { Route as AuthedProfileSplatImport } from './routes/_authed/profile.$'
import { Route as AuthedLocationsLocationIdImport } from './routes/_authed/locations.$locationId'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedLocationsRoute = AuthedLocationsImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedLocationsIndexRoute = AuthedLocationsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedLocationsRoute,
} as any)

const AuthedProfileSplatRoute = AuthedProfileSplatImport.update({
  id: '/profile/$',
  path: '/profile/$',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedLocationsLocationIdRoute = AuthedLocationsLocationIdImport.update({
  id: '/$locationId',
  path: '/$locationId',
  getParentRoute: () => AuthedLocationsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/locations': {
      id: '/_authed/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof AuthedLocationsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/locations/$locationId': {
      id: '/_authed/locations/$locationId'
      path: '/$locationId'
      fullPath: '/locations/$locationId'
      preLoaderRoute: typeof AuthedLocationsLocationIdImport
      parentRoute: typeof AuthedLocationsImport
    }
    '/_authed/profile/$': {
      id: '/_authed/profile/$'
      path: '/profile/$'
      fullPath: '/profile/$'
      preLoaderRoute: typeof AuthedProfileSplatImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/locations/': {
      id: '/_authed/locations/'
      path: '/'
      fullPath: '/locations/'
      preLoaderRoute: typeof AuthedLocationsIndexImport
      parentRoute: typeof AuthedLocationsImport
    }
  }
}

// Create and export the route tree

interface AuthedLocationsRouteChildren {
  AuthedLocationsLocationIdRoute: typeof AuthedLocationsLocationIdRoute
  AuthedLocationsIndexRoute: typeof AuthedLocationsIndexRoute
}

const AuthedLocationsRouteChildren: AuthedLocationsRouteChildren = {
  AuthedLocationsLocationIdRoute: AuthedLocationsLocationIdRoute,
  AuthedLocationsIndexRoute: AuthedLocationsIndexRoute,
}

const AuthedLocationsRouteWithChildren = AuthedLocationsRoute._addFileChildren(
  AuthedLocationsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedLocationsRoute: typeof AuthedLocationsRouteWithChildren
  AuthedProfileSplatRoute: typeof AuthedProfileSplatRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedLocationsRoute: AuthedLocationsRouteWithChildren,
  AuthedProfileSplatRoute: AuthedProfileSplatRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/locations': typeof AuthedLocationsRouteWithChildren
  '/locations/$locationId': typeof AuthedLocationsLocationIdRoute
  '/profile/$': typeof AuthedProfileSplatRoute
  '/locations/': typeof AuthedLocationsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/locations/$locationId': typeof AuthedLocationsLocationIdRoute
  '/profile/$': typeof AuthedProfileSplatRoute
  '/locations': typeof AuthedLocationsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/locations': typeof AuthedLocationsRouteWithChildren
  '/_authed/locations/$locationId': typeof AuthedLocationsLocationIdRoute
  '/_authed/profile/$': typeof AuthedProfileSplatRoute
  '/_authed/locations/': typeof AuthedLocationsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/locations'
    | '/locations/$locationId'
    | '/profile/$'
    | '/locations/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/locations/$locationId' | '/profile/$' | '/locations'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_authed/locations'
    | '/_authed/locations/$locationId'
    | '/_authed/profile/$'
    | '/_authed/locations/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/locations",
        "/_authed/profile/$"
      ]
    },
    "/_authed/locations": {
      "filePath": "_authed/locations.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/locations/$locationId",
        "/_authed/locations/"
      ]
    },
    "/_authed/locations/$locationId": {
      "filePath": "_authed/locations.$locationId.tsx",
      "parent": "/_authed/locations"
    },
    "/_authed/profile/$": {
      "filePath": "_authed/profile.$.tsx",
      "parent": "/_authed"
    },
    "/_authed/locations/": {
      "filePath": "_authed/locations.index.tsx",
      "parent": "/_authed/locations"
    }
  }
}
ROUTE_MANIFEST_END */
