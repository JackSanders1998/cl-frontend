/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedSeshesIndexImport } from './routes/_authed/seshes/index'
import { Route as AuthedLocationsIndexImport } from './routes/_authed/locations/index'
import { Route as AuthedClimbsIndexImport } from './routes/_authed/climbs/index'
import { Route as AuthedSeshesSeshIdImport } from './routes/_authed/seshes/$seshId'
import { Route as AuthedProfileSplatImport } from './routes/_authed/profile.$'
import { Route as AuthedLocationsLocationIdImport } from './routes/_authed/locations/$locationId'
import { Route as AuthedClimbsClimbIdImport } from './routes/_authed/climbs/$climbId'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedSeshesIndexRoute = AuthedSeshesIndexImport.update({
  id: '/seshes/',
  path: '/seshes/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedLocationsIndexRoute = AuthedLocationsIndexImport.update({
  id: '/locations/',
  path: '/locations/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedClimbsIndexRoute = AuthedClimbsIndexImport.update({
  id: '/climbs/',
  path: '/climbs/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSeshesSeshIdRoute = AuthedSeshesSeshIdImport.update({
  id: '/seshes/$seshId',
  path: '/seshes/$seshId',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedProfileSplatRoute = AuthedProfileSplatImport.update({
  id: '/profile/$',
  path: '/profile/$',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedLocationsLocationIdRoute = AuthedLocationsLocationIdImport.update({
  id: '/locations/$locationId',
  path: '/locations/$locationId',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedClimbsClimbIdRoute = AuthedClimbsClimbIdImport.update({
  id: '/climbs/$climbId',
  path: '/climbs/$climbId',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/climbs/$climbId': {
      id: '/_authed/climbs/$climbId'
      path: '/climbs/$climbId'
      fullPath: '/climbs/$climbId'
      preLoaderRoute: typeof AuthedClimbsClimbIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/locations/$locationId': {
      id: '/_authed/locations/$locationId'
      path: '/locations/$locationId'
      fullPath: '/locations/$locationId'
      preLoaderRoute: typeof AuthedLocationsLocationIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/profile/$': {
      id: '/_authed/profile/$'
      path: '/profile/$'
      fullPath: '/profile/$'
      preLoaderRoute: typeof AuthedProfileSplatImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/seshes/$seshId': {
      id: '/_authed/seshes/$seshId'
      path: '/seshes/$seshId'
      fullPath: '/seshes/$seshId'
      preLoaderRoute: typeof AuthedSeshesSeshIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/climbs/': {
      id: '/_authed/climbs/'
      path: '/climbs'
      fullPath: '/climbs'
      preLoaderRoute: typeof AuthedClimbsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/locations/': {
      id: '/_authed/locations/'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof AuthedLocationsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/seshes/': {
      id: '/_authed/seshes/'
      path: '/seshes'
      fullPath: '/seshes'
      preLoaderRoute: typeof AuthedSeshesIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedClimbsClimbIdRoute: typeof AuthedClimbsClimbIdRoute
  AuthedLocationsLocationIdRoute: typeof AuthedLocationsLocationIdRoute
  AuthedProfileSplatRoute: typeof AuthedProfileSplatRoute
  AuthedSeshesSeshIdRoute: typeof AuthedSeshesSeshIdRoute
  AuthedClimbsIndexRoute: typeof AuthedClimbsIndexRoute
  AuthedLocationsIndexRoute: typeof AuthedLocationsIndexRoute
  AuthedSeshesIndexRoute: typeof AuthedSeshesIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedClimbsClimbIdRoute: AuthedClimbsClimbIdRoute,
  AuthedLocationsLocationIdRoute: AuthedLocationsLocationIdRoute,
  AuthedProfileSplatRoute: AuthedProfileSplatRoute,
  AuthedSeshesSeshIdRoute: AuthedSeshesSeshIdRoute,
  AuthedClimbsIndexRoute: AuthedClimbsIndexRoute,
  AuthedLocationsIndexRoute: AuthedLocationsIndexRoute,
  AuthedSeshesIndexRoute: AuthedSeshesIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/climbs/$climbId': typeof AuthedClimbsClimbIdRoute
  '/locations/$locationId': typeof AuthedLocationsLocationIdRoute
  '/profile/$': typeof AuthedProfileSplatRoute
  '/seshes/$seshId': typeof AuthedSeshesSeshIdRoute
  '/climbs': typeof AuthedClimbsIndexRoute
  '/locations': typeof AuthedLocationsIndexRoute
  '/seshes': typeof AuthedSeshesIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthedRouteWithChildren
  '/climbs/$climbId': typeof AuthedClimbsClimbIdRoute
  '/locations/$locationId': typeof AuthedLocationsLocationIdRoute
  '/profile/$': typeof AuthedProfileSplatRoute
  '/seshes/$seshId': typeof AuthedSeshesSeshIdRoute
  '/climbs': typeof AuthedClimbsIndexRoute
  '/locations': typeof AuthedLocationsIndexRoute
  '/seshes': typeof AuthedSeshesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/climbs/$climbId': typeof AuthedClimbsClimbIdRoute
  '/_authed/locations/$locationId': typeof AuthedLocationsLocationIdRoute
  '/_authed/profile/$': typeof AuthedProfileSplatRoute
  '/_authed/seshes/$seshId': typeof AuthedSeshesSeshIdRoute
  '/_authed/climbs/': typeof AuthedClimbsIndexRoute
  '/_authed/locations/': typeof AuthedLocationsIndexRoute
  '/_authed/seshes/': typeof AuthedSeshesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/climbs/$climbId'
    | '/locations/$locationId'
    | '/profile/$'
    | '/seshes/$seshId'
    | '/climbs'
    | '/locations'
    | '/seshes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/climbs/$climbId'
    | '/locations/$locationId'
    | '/profile/$'
    | '/seshes/$seshId'
    | '/climbs'
    | '/locations'
    | '/seshes'
  id:
    | '__root__'
    | '/_authed'
    | '/_authed/climbs/$climbId'
    | '/_authed/locations/$locationId'
    | '/_authed/profile/$'
    | '/_authed/seshes/$seshId'
    | '/_authed/climbs/'
    | '/_authed/locations/'
    | '/_authed/seshes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/climbs/$climbId",
        "/_authed/locations/$locationId",
        "/_authed/profile/$",
        "/_authed/seshes/$seshId",
        "/_authed/climbs/",
        "/_authed/locations/",
        "/_authed/seshes/"
      ]
    },
    "/_authed/climbs/$climbId": {
      "filePath": "_authed/climbs/$climbId.tsx",
      "parent": "/_authed"
    },
    "/_authed/locations/$locationId": {
      "filePath": "_authed/locations/$locationId.tsx",
      "parent": "/_authed"
    },
    "/_authed/profile/$": {
      "filePath": "_authed/profile.$.tsx",
      "parent": "/_authed"
    },
    "/_authed/seshes/$seshId": {
      "filePath": "_authed/seshes/$seshId.tsx",
      "parent": "/_authed"
    },
    "/_authed/climbs/": {
      "filePath": "_authed/climbs/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/locations/": {
      "filePath": "_authed/locations/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/seshes/": {
      "filePath": "_authed/seshes/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
