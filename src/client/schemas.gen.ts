// This file is auto-generated by @hey-api/openapi-ts

export const AttemptSchema = {
	type: 'string',
	enum: ['onsight', 'flash', 'redpoint', 'fall']
} as const;

export const CreateLocationSchema = {
	type: 'object',
	required: ['author', 'name', 'environment'],
	properties: {
		author: {
			type: 'string'
		},
		description: {
			type: 'string',
			nullable: true
		},
		environment: {
			$ref: '#/components/schemas/Environment'
		},
		name: {
			type: 'string'
		}
	}
} as const;

export const CreatePreferenceSchema = {
	type: 'object',
	required: ['boulder_scale', 'sport_scale', 'color_scheme', 'theme'],
	properties: {
		boulder_scale: {
			type: 'string'
		},
		color_scheme: {
			type: 'string'
		},
		sport_scale: {
			type: 'string'
		},
		theme: {
			type: 'string'
		}
	}
} as const;

export const CreateRouteSchema = {
	type: 'object',
	required: ['location_id', 'grade', 'scale', 'disciplines', 'author'],
	properties: {
		author: {
			type: 'string'
		},
		description: {
			type: 'string',
			nullable: true
		},
		disciplines: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Discipline'
			}
		},
		grade: {
			type: 'string'
		},
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		scale: {
			$ref: '#/components/schemas/Scale'
		}
	}
} as const;

export const CreateSeshSchema = {
	type: 'object',
	required: ['location_id'],
	properties: {
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		notes: {
			type: 'string',
			nullable: true
		}
	}
} as const;

export const CreateTickSchema = {
	type: 'object',
	required: ['route_id', 'sesh_id', 'discipline', 'attempt'],
	properties: {
		attempt: {
			$ref: '#/components/schemas/Attempt'
		},
		discipline: {
			$ref: '#/components/schemas/Discipline'
		},
		lap_group: {
			type: 'string',
			format: 'uuid',
			nullable: true
		},
		notes: {
			type: 'string',
			nullable: true
		},
		route_id: {
			type: 'string',
			format: 'uuid'
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		}
	}
} as const;

export const DisciplineSchema = {
	type: 'string',
	enum: ['boulder', 'sport', 'top_rope']
} as const;

export const EnvironmentSchema = {
	type: 'string',
	enum: ['gym', 'outdoor']
} as const;

export const LocationSchema = {
	type: 'object',
	required: ['location_id', 'author', 'name', 'environment', 'created_at', 'updated_at'],
	properties: {
		author: {
			type: 'string'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		description: {
			type: 'string',
			nullable: true
		},
		environment: {
			$ref: '#/components/schemas/Environment'
		},
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		name: {
			type: 'string'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		}
	}
} as const;

export const LocationSearchParamsSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			nullable: true
		}
	}
} as const;

export const PreferenceSchema = {
	type: 'object',
	required: [
		'preference_id',
		'user_id',
		'boulder_scale',
		'sport_scale',
		'color_scheme',
		'theme',
		'created_at',
		'updated_at'
	],
	properties: {
		boulder_scale: {
			type: 'string'
		},
		color_scheme: {
			type: 'string'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		preference_id: {
			type: 'string',
			format: 'uuid'
		},
		sport_scale: {
			type: 'string'
		},
		theme: {
			type: 'string'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		},
		user_id: {
			type: 'string'
		}
	}
} as const;

export const RouteSchema = {
	type: 'object',
	required: [
		'route_id',
		'location_id',
		'grade',
		'scale',
		'disciplines',
		'author',
		'created_at',
		'updated_at'
	],
	properties: {
		author: {
			type: 'string'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		description: {
			type: 'string',
			nullable: true
		},
		disciplines: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Discipline'
			}
		},
		grade: {
			type: 'string'
		},
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		route_id: {
			type: 'string',
			format: 'uuid'
		},
		scale: {
			$ref: '#/components/schemas/Scale'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		}
	}
} as const;

export const RouteWithLocationSchema = {
	type: 'object',
	required: [
		'route_id',
		'grade',
		'scale',
		'disciplines',
		'author',
		'location',
		'created_at',
		'updated_at'
	],
	properties: {
		author: {
			type: 'string'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		description: {
			type: 'string',
			nullable: true
		},
		disciplines: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Discipline'
			}
		},
		grade: {
			type: 'string'
		},
		location: {
			$ref: '#/components/schemas/Location'
		},
		route_id: {
			type: 'string',
			format: 'uuid'
		},
		scale: {
			$ref: '#/components/schemas/Scale'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		}
	}
} as const;

export const RouteWithLocationSqlxSchema = {
	type: 'object',
	required: [
		'route_id',
		'grade',
		'scale',
		'disciplines',
		'author',
		'created_at',
		'updated_at',
		'location_id',
		'location_author',
		'name',
		'environment',
		'location_created_at',
		'location_updated_at'
	],
	properties: {
		author: {
			type: 'string'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		description: {
			type: 'string',
			nullable: true
		},
		disciplines: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Discipline'
			}
		},
		environment: {
			$ref: '#/components/schemas/Environment'
		},
		grade: {
			type: 'string'
		},
		location_author: {
			type: 'string'
		},
		location_created_at: {
			type: 'string',
			format: 'date-time'
		},
		location_description: {
			type: 'string',
			nullable: true
		},
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		location_updated_at: {
			type: 'string',
			format: 'date-time'
		},
		name: {
			type: 'string'
		},
		route_id: {
			type: 'string',
			format: 'uuid'
		},
		scale: {
			$ref: '#/components/schemas/Scale'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		}
	}
} as const;

export const ScaleSchema = {
	type: 'string',
	enum: ['verm', 'font', 'yosemite', 'french']
} as const;

export const SeshRowSchema = {
	type: 'object',
	required: ['sesh_id', 'user_id', 'location_id', 'start', 'created_at', 'updated_at'],
	properties: {
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		end: {
			type: 'string',
			format: 'date-time',
			nullable: true
		},
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		notes: {
			type: 'string',
			nullable: true
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		},
		start: {
			type: 'string',
			format: 'date-time'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		},
		user_id: {
			type: 'string'
		}
	}
} as const;

export const SeshWithLocationSchema = {
	type: 'object',
	required: ['sesh_id', 'user_id', 'location', 'start', 'created_at', 'updated_at'],
	properties: {
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		end: {
			type: 'string',
			format: 'date-time',
			nullable: true
		},
		location: {
			$ref: '#/components/schemas/Location'
		},
		notes: {
			type: 'string',
			nullable: true
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		},
		start: {
			type: 'string',
			format: 'date-time'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		},
		user_id: {
			type: 'string'
		}
	}
} as const;

export const SeshWithLocationAndTicksSchema = {
	type: 'object',
	required: ['sesh_id', 'user_id', 'location', 'ticks', 'start', 'created_at', 'updated_at'],
	properties: {
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		end: {
			type: 'string',
			format: 'date-time',
			nullable: true
		},
		location: {
			$ref: '#/components/schemas/Location'
		},
		notes: {
			type: 'string',
			nullable: true
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		},
		start: {
			type: 'string',
			format: 'date-time'
		},
		ticks: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/TickWithRoute'
			}
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		},
		user_id: {
			type: 'string'
		}
	}
} as const;

export const SeshWithLocationSqlxSchema = {
	type: 'object',
	required: [
		'sesh_id',
		'user_id',
		'start',
		'created_at',
		'updated_at',
		'location_id',
		'author',
		'name',
		'environment',
		'location_created_at',
		'location_updated_at'
	],
	properties: {
		author: {
			type: 'string'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		description: {
			type: 'string',
			nullable: true
		},
		end: {
			type: 'string',
			format: 'date-time',
			nullable: true
		},
		environment: {
			$ref: '#/components/schemas/Environment'
		},
		location_created_at: {
			type: 'string',
			format: 'date-time'
		},
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		location_updated_at: {
			type: 'string',
			format: 'date-time'
		},
		name: {
			type: 'string'
		},
		notes: {
			type: 'string',
			nullable: true
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		},
		start: {
			type: 'string',
			format: 'date-time'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		},
		user_id: {
			type: 'string'
		}
	}
} as const;

export const TickRowSchema = {
	type: 'object',
	required: ['tick_id', 'route_id', 'sesh_id', 'discipline', 'attempt', 'created_at', 'updated_at'],
	properties: {
		attempt: {
			$ref: '#/components/schemas/Attempt'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		discipline: {
			$ref: '#/components/schemas/Discipline'
		},
		lap_group: {
			type: 'string',
			format: 'uuid',
			nullable: true
		},
		notes: {
			type: 'string',
			nullable: true
		},
		route_id: {
			type: 'string',
			format: 'uuid'
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		},
		tick_id: {
			type: 'string',
			format: 'uuid'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		}
	}
} as const;

export const TickSearchParamsSchema = {
	type: 'object',
	required: ['sesh_id'],
	properties: {
		sesh_id: {
			type: 'string',
			format: 'uuid'
		}
	}
} as const;

export const TickWithRouteSchema = {
	type: 'object',
	required: [
		'tick_id',
		'route_id',
		'sesh_id',
		'discipline',
		'attempt',
		'route',
		'created_at',
		'updated_at'
	],
	properties: {
		attempt: {
			$ref: '#/components/schemas/Attempt'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		discipline: {
			$ref: '#/components/schemas/Discipline'
		},
		lap_group: {
			type: 'string',
			format: 'uuid',
			nullable: true
		},
		notes: {
			type: 'string',
			nullable: true
		},
		route: {
			$ref: '#/components/schemas/RouteWithLocation'
		},
		route_id: {
			type: 'string',
			format: 'uuid'
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		},
		tick_id: {
			type: 'string',
			format: 'uuid'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		}
	}
} as const;

export const TickWithRouteSqlxSchema = {
	type: 'object',
	required: [
		'tick_id',
		'sesh_id',
		'discipline',
		'attempt',
		'created_at',
		'updated_at',
		'route_id',
		'grade',
		'scale',
		'disciplines',
		'author',
		'route_created_at',
		'route_updated_at',
		'location_id',
		'location_author',
		'name',
		'environment',
		'location_created_at',
		'location_updated_at'
	],
	properties: {
		attempt: {
			$ref: '#/components/schemas/Attempt'
		},
		author: {
			type: 'string'
		},
		created_at: {
			type: 'string',
			format: 'date-time'
		},
		description: {
			type: 'string',
			nullable: true
		},
		discipline: {
			$ref: '#/components/schemas/Discipline'
		},
		disciplines: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Discipline'
			}
		},
		environment: {
			$ref: '#/components/schemas/Environment'
		},
		grade: {
			type: 'string'
		},
		lap_group: {
			type: 'string',
			format: 'uuid',
			nullable: true
		},
		location_author: {
			type: 'string'
		},
		location_created_at: {
			type: 'string',
			format: 'date-time'
		},
		location_description: {
			type: 'string',
			nullable: true
		},
		location_id: {
			type: 'string',
			format: 'uuid'
		},
		location_updated_at: {
			type: 'string',
			format: 'date-time'
		},
		name: {
			type: 'string'
		},
		notes: {
			type: 'string',
			nullable: true
		},
		route_created_at: {
			type: 'string',
			format: 'date-time'
		},
		route_id: {
			type: 'string',
			format: 'uuid'
		},
		route_updated_at: {
			type: 'string',
			format: 'date-time'
		},
		scale: {
			$ref: '#/components/schemas/Scale'
		},
		sesh_id: {
			type: 'string',
			format: 'uuid'
		},
		tick_id: {
			type: 'string',
			format: 'uuid'
		},
		updated_at: {
			type: 'string',
			format: 'date-time'
		}
	}
} as const;

export const UpdateLocationSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			nullable: true
		},
		environment: {
			allOf: [
				{
					$ref: '#/components/schemas/Environment'
				}
			],
			nullable: true
		},
		name: {
			type: 'string',
			nullable: true
		}
	}
} as const;

export const UpdatePreferenceSchema = {
	type: 'object',
	properties: {
		boulder_scale: {
			type: 'string',
			nullable: true
		},
		color_scheme: {
			type: 'string',
			nullable: true
		},
		sport_scale: {
			type: 'string',
			nullable: true
		},
		theme: {
			type: 'string',
			nullable: true
		}
	}
} as const;

export const UpdateRouteSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			nullable: true
		},
		disciplines: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Discipline'
			},
			nullable: true
		},
		grade: {
			type: 'string',
			nullable: true
		},
		scale: {
			allOf: [
				{
					$ref: '#/components/schemas/Scale'
				}
			],
			nullable: true
		}
	}
} as const;

export const UpdateSeshSchema = {
	type: 'object',
	properties: {
		end_session: {
			type: 'boolean',
			nullable: true
		},
		location_id: {
			type: 'string',
			format: 'uuid',
			nullable: true
		},
		notes: {
			type: 'string',
			nullable: true
		}
	}
} as const;
