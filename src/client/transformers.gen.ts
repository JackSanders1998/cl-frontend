// This file is auto-generated by @hey-api/openapi-ts

import type {
	SearchLocationsResponse,
	CreateLocationResponse,
	GetLocationByLocationIdResponse,
	UpdateLocationByLocationIdResponse,
	SearchRoutesResponse,
	CreateRouteResponse,
	GetRouteByRouteIdResponse,
	SearchSeshesResponse,
	CreateSeshResponse,
	GetActiveSeshResponse,
	GetSeshBySeshIdResponse,
	UpdateSeshBySeshIdResponse,
	SearchTicksResponse
} from './types.gen';

const locationSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const searchLocationsResponseTransformer = async (
	data: any
): Promise<SearchLocationsResponse> => {
	data = data.map((item: any) => {
		return locationSchemaResponseTransformer(item);
	});
	return data;
};

export const createLocationResponseTransformer = async (
	data: any
): Promise<CreateLocationResponse> => {
	data = locationSchemaResponseTransformer(data);
	return data;
};

export const getLocationByLocationIdResponseTransformer = async (
	data: any
): Promise<GetLocationByLocationIdResponse> => {
	data = locationSchemaResponseTransformer(data);
	return data;
};

export const updateLocationByLocationIdResponseTransformer = async (
	data: any
): Promise<UpdateLocationByLocationIdResponse> => {
	data = locationSchemaResponseTransformer(data);
	return data;
};

const routeSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const searchRoutesResponseTransformer = async (data: any): Promise<SearchRoutesResponse> => {
	data = data.map((item: any) => {
		return routeSchemaResponseTransformer(item);
	});
	return data;
};

export const createRouteResponseTransformer = async (data: any): Promise<CreateRouteResponse> => {
	data = routeSchemaResponseTransformer(data);
	return data;
};

const routeWithLocationSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.location = locationSchemaResponseTransformer(data.location);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const getRouteByRouteIdResponseTransformer = async (
	data: any
): Promise<GetRouteByRouteIdResponse> => {
	data = routeWithLocationSchemaResponseTransformer(data);
	return data;
};

const seshWithLocationSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	if (data.end) {
		data.end = new Date(data.end);
	}
	data.location = locationSchemaResponseTransformer(data.location);
	data.start = new Date(data.start);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const searchSeshesResponseTransformer = async (data: any): Promise<SearchSeshesResponse> => {
	data = data.map((item: any) => {
		return seshWithLocationSchemaResponseTransformer(item);
	});
	return data;
};

export const createSeshResponseTransformer = async (data: any): Promise<CreateSeshResponse> => {
	data = seshWithLocationSchemaResponseTransformer(data);
	return data;
};

export const getActiveSeshResponseTransformer = async (
	data: any
): Promise<GetActiveSeshResponse> => {
	data = seshWithLocationSchemaResponseTransformer(data);
	return data;
};

const tickWithRouteSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.route = routeWithLocationSchemaResponseTransformer(data.route);
	data.updated_at = new Date(data.updated_at);
	return data;
};

const seshWithLocationAndTicksSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	if (data.end) {
		data.end = new Date(data.end);
	}
	data.location = locationSchemaResponseTransformer(data.location);
	data.start = new Date(data.start);
	data.ticks = data.ticks.map((item: any) => {
		return tickWithRouteSchemaResponseTransformer(item);
	});
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const getSeshBySeshIdResponseTransformer = async (
	data: any
): Promise<GetSeshBySeshIdResponse> => {
	data = seshWithLocationAndTicksSchemaResponseTransformer(data);
	return data;
};

const seshRowSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	if (data.end) {
		data.end = new Date(data.end);
	}
	data.start = new Date(data.start);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const updateSeshBySeshIdResponseTransformer = async (
	data: any
): Promise<UpdateSeshBySeshIdResponse> => {
	data = seshRowSchemaResponseTransformer(data);
	return data;
};

export const searchTicksResponseTransformer = async (data: any): Promise<SearchTicksResponse> => {
	data = data.map((item: any) => {
		return tickWithRouteSchemaResponseTransformer(item);
	});
	return data;
};
